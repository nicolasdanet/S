
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis::data {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class DelegateShared : public juce::ReferenceCountedObject {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

friend class DelegateManager;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

using Ptr = juce::ReferenceCountedObjectPtr<DelegateShared>;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit DelegateShared (const Invariant& i);
    
    ~DelegateShared() = default;

public:
    juce::ValueTree getValueTree() const
    {
        return shared_;
    }
    
private:
    juce::ValueTree shared_;

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (DelegateShared)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class DelegateManager : private juce::DeletedAtShutdown {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

public:
    DelegateManager()  = default;
    ~DelegateManager() = default;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    DelegateShared* create (const Invariant&);
    
public:
    DelegateShared* getOrCreate (const Invariant&);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

private:
    std::vector<DelegateShared::Ptr> delegates_;
    
private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (DelegateManager)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class DelegateCache {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    DelegateCache() : p_ (new DelegateManager())
    {
    }
    
    ~DelegateCache() = default;

public:
    DelegateCache (const DelegateCache&) = delete;
    DelegateCache (DelegateCache&&) = delete;
    DelegateCache& operator = (const DelegateCache&) = delete;
    DelegateCache& operator = (DelegateCache&&) = delete;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    operator DelegateManager*() const
    {
        return p_;
    }
    
private:
    DelegateManager* p_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
