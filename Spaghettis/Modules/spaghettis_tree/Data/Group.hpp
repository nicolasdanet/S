
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis::data {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Group {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

friend class Data;

template <class T> friend struct Iterator;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

using Iter = data::Iterator<Parameter>;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    explicit Group (const juce::ValueTree& group = juce::ValueTree()) : group_ (group)
    {
        jassert (!group_.isValid() || group_.hasType (Id::GROUP));
    }

public:
    ~Group() = default;
    
public:
    Group (const Group&) = default;
    Group (Group&&) = default;
    Group& operator = (const Group&) = default;
    Group& operator = (Group&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Iter begin() const { return Iter (group_.begin()); }
    Iter end() const   { return Iter (group_.end());   }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::String getName() const;
    bool isHidden() const;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    template <class T> Parameter addParameter (juce::StringRef key,
        juce::StringRef label,
        juce::StringRef info,
        T t,
        DelegateManager* p = nullptr)
    {
        const Invariant i = { key, ParameterType<T>::get(), label, info };

        return add (p, i, Cast::toVar<T> (t));
    }
    
private:
    Parameter add (DelegateManager*, const Invariant&, juce::var);
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool      hasParameter (const juce::String&) const;
    Parameter getParameter (const juce::String&) const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static Group getFromParameter (const Parameter&);
    static Group makeCopy (const Group&);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

/* For debugging purpose only. */

public:
    bool hasUniqueOwnership() const
    {
        return group_.getReferenceCount() == 1;
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

private:
    juce::ValueTree group_;

private:
    JUCE_LEAK_DETECTOR (Group)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
