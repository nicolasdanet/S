
/* 
    Copyright (c) 2007-2013 Andi Brae.
    Copyright (c) 2013 Jojo and others.
    
*/

/* < http://opensource.org/licenses/BSD-2-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

/* < https://en.wikipedia.org/wiki/Clef > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace belle {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace Shapes {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Clef {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

protected:
    Clef() : glyph_ (0x0000), scale_ (House::kAffineJoie)
    {
    }

public:
    Clef (const Clef&) = default;
    Clef (Clef&&) = default;
    Clef& operator = (const Clef&) = default;
    Clef& operator = (Clef&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void addToPath (Path& path) const
    {
        path.addPath (House::getInstance().getJoie().getGlyph (glyph_)->getPath(), scale_);
    }

protected:
    unicode glyph_;
    Affine scale_;

private:
    PRIM_LEAK_DETECTOR (Clef)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

struct FClef : public Clef {

public:
    FClef()
    {
        glyph_ = 0x0042;
        scale_ = Affine::translation (Vector (0.0, House::kStaffSpaceWidth)) * scale_;
    }
};

struct GClef : public Clef {

public:
    GClef()
    {
        glyph_ = 0x0041;
        scale_ = Affine::translation (Vector (0.0, -House::kStaffSpaceWidth)) * scale_;
    }
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace Shapes

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace belle

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
