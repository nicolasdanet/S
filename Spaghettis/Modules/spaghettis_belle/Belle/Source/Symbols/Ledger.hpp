
/* 
    Copyright (c) 2007-2013 Andi Brae.
    Copyright (c) 2013 Jojo and others.
    
*/

/* < http://opensource.org/licenses/BSD-2-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

/* < https://en.wikipedia.org/wiki/Ledger_line > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace belle {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace Shapes {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class LedgerLine {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    LedgerLine()
    {
        double b = (House::kNoteHeadWidth / 2.0) + House::kLedgerExtent;
        double a = -b;
        a_ = Point (a, 0.0);
        b_ = Point (b, 0.0);
    }

public:
    LedgerLine (const LedgerLine&) = default;
    LedgerLine (LedgerLine&&) = default;
    LedgerLine& operator = (const LedgerLine&) = default;
    LedgerLine& operator = (LedgerLine&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void addToPath (Path& path) const
    {
        path.addLine (a_, b_, House::kStaffLineThickness);
    }
    
protected:
    Point a_;
    Point b_;

private:
    PRIM_LEAK_DETECTOR (LedgerLine)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

struct LedgerLineTwoColumn : public LedgerLine {

public:
    LedgerLineTwoColumn (bool stemUp = true)
    {
        if (stemUp) { b_ += Vector (House::kNoteHeadWidthPrecise, 0.0); } 
        else {
            a_ -= Vector (House::kNoteHeadWidthPrecise, 0.0);
        }
    }
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace Shapes

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace belle

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
