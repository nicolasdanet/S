
/* 
    Copyright (c) 2007-2013 Andi Brae.
    Copyright (c) 2013 Jojo and others.
    
*/

/* < http://opensource.org/licenses/BSD-2-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

/* < https://en.wikipedia.org/wiki/Accidental_%28music%29 > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace belle {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace Shapes {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Accidental {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

protected:
    Accidental (unicode glyph) : glyph_ (glyph)
    {
    }

public:
    Accidental (const Accidental&) = default;
    Accidental (Accidental&&) = default;
    Accidental& operator = (const Accidental&) = default;
    Accidental& operator = (Accidental&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void addToPath (Path& path) const
    {
        path.addPath (House::getInstance().getJoie().getGlyph (glyph_)->getPath(), House::kAffineJoie);
    }

private:
    unicode glyph_;

private:
    PRIM_LEAK_DETECTOR (Accidental)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

struct AccidentalDoubleFlat : public Accidental {

public:
    AccidentalDoubleFlat() : Accidental (0x0045)
    {
    }
};

struct AccidentalFlat : public Accidental {

public:
    AccidentalFlat() : Accidental (0x0046)
    {
    }
};
   
struct AccidentalNatural : public Accidental {

public:
    AccidentalNatural() : Accidental (0x0047)
    {
    }
};

struct AccidentalSharp : public Accidental {

public:
    AccidentalSharp() : Accidental (0x0048)
    {
    }
};

struct AccidentalDoubleSharp : public Accidental {

public:
    AccidentalDoubleSharp() : Accidental (0x0049)
    {
    }
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace Shapes

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace belle

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
