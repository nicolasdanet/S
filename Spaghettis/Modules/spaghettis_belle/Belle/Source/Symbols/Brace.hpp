
/* 
    Copyright (c) 2007-2013 Andi Brae.
    Copyright (c) 2013 Jojo and others.
    
*/

/* < http://opensource.org/licenses/BSD-2-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

/* < https://en.wikipedia.org/wiki/Brace_%28music%29 > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace belle {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace Shapes {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class SystemBrace {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    SystemBrace (double height, double width) : height_ (height), width_ (width)
    {
    }

public:
    SystemBrace (const SystemBrace&) = default;
    SystemBrace (SystemBrace&&) = default;
    SystemBrace& operator = (const SystemBrace&) = default;
    SystemBrace& operator = (SystemBrace&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -
    
public:
    void addToPath (Path& path) const;

private:
    double height_;
    double width_;

private:
    PRIM_LEAK_DETECTOR (SystemBrace)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace Shapes

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#ifdef BELLE_COMPILE_INLINE

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

/* Control points from a quadratic Bezier curve taken from a font program. */
        
void Shapes::SystemBrace::addToPath (Path& path) const
{
    const Point origin_;
        
    Point p[44];

    p[0]  = Point (12.5,   12.5);
    p[1]  = Point (25.0,   25.0);
    p[2]  = Point (87.5,   87.5);
    p[3]  = Point (150.0,  150.0);
    p[4]  = Point (100.0,  325.0);
    p[5]  = Point (50.0,   500.0);
    p[6]  = Point (25.0,   650.0);
    p[7]  = Point (0.0,    800.0);
    p[8]  = Point (75.0,   925.0);
    p[9]  = Point (150.0,  1050.0);
    p[10] = Point (175.0,  1025.0);
    p[11] = Point (200.0,  1000.0);
    p[12] = Point (125.0,  925.0);
    p[13] = Point (50.0,   850.0);
    p[14] = Point (100.0,  675.0);
    p[15] = Point (150.0,  500.0);
    p[16] = Point (175.0,  350.0);
    p[17] = Point (200.0,  200.0);
    p[18] = Point (175.0,  125.0);
    p[19] = Point (150.0,  50.0);
    p[20] = Point (125.0,  25.0);
    p[21] = Point (100.0,  0.0);
    p[22] = Point (125.0, -25.0);
    p[23] = Point (150.0, -50.0);
    p[24] = Point (175.0, -125.0);
    p[25] = Point (200.0, -200.0);
    p[26] = Point (175.0, -350.0);
    p[27] = Point (150.0, -500.0);
    p[28] = Point (100.0, -675.0);
    p[29] = Point (50.0,  -850.0);
    p[30] = Point (125.0, -925.0);
    p[31] = Point (200.0, -1000.0);
    p[32] = Point (175.0, -1025.0);
    p[33] = Point (150.0, -1050.0);
    p[34] = Point (75.0,  -925.0);
    p[35] = Point (0.0,   -800.0);
    p[36] = Point (25.0,  -650.0);
    p[37] = Point (50.0,  -500.0);
    p[38] = Point (100.0, -325.0);
    p[39] = Point (150.0, -150.0);
    p[40] = Point (87.5,  -87.5);
    p[41] = Point (25.0,  -25.0);
    p[42] = Point (12.5,  -12.5);
    p[43] = Point (0.0,    0.0);

    for (int i = 0; i < 44; ++i) {
        p[i] *= height_ / 2000.0;
        p[i].getX() *= width_;
        p[i] += origin_;
    }
          
    path.add (Instruction::moveTo (p[0]));
    
    for (int i = 0; i <= 42; i += 2) {
        Point p0 = p[i];
        Point p1 = p[(i + 1)];
        Point p2 = p[(i + 2) % 44];
        Bezier b (p0, p1, p2);                      /* Make a cubic from a quadratic. */
        path.add (Instruction::withBezier (b));
    }
        
    path.add (Instruction::closePath());
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#endif // BELLE_COMPILE_INLINE

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace belle

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
