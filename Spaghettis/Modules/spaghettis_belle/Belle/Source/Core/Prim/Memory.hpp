
/* 
    Copyright (c) 2007-2013 Andi Brae.
    Copyright (c) 2013 Jojo and others.
    
*/

/* < http://opensource.org/licenses/BSD-2-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace prim {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

struct Memory {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

/* Assume no aliasing for memory operations. */

template <class T> static void clear (T* a, int items)
{
    std::memset (static_cast<void*> (a), 0, sizeof (T) * items);
}

template <class T> static void copy (T* dest, const T* src, int items = 1)
{
    std::memcpy (static_cast<void*> (dest), static_cast<const void*> (src), sizeof (T) * items);
}

template <class T> static void swap (T* a, T* b, int items)
{
    if (a != b) {
    //
    const int bufferSize = 1024;
    
    byte buffer[bufferSize];
    byte* ptrA = reinterpret_cast<byte*> (a);
    byte* ptrB = reinterpret_cast<byte*> (b);
    int size = static_cast<int> (sizeof (T) * items);
    
    while (size > 0) {
    //
    int n = size < bufferSize ? size : bufferSize;
    std::memcpy (buffer, ptrA, n);
    std::memcpy (ptrA, ptrB, n);
    std::memcpy (ptrB, buffer, n);
    ptrA += n;
    ptrB += n;
    size -= n;
    //
    }
    //
    }
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace prim

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
