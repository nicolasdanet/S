
/* 
    Copyright (c) 2007-2013 Andi Brae.
    Copyright (c) 2013 Jojo and others.
    
*/

/* < http://opensource.org/licenses/BSD-2-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

/* The node of the music graph. */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace belle {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

class Stamp;
class Engraver;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Label {

template <class T> friend class prim::Graph;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Label()
    {
    }

    explicit Label (mica::Concept type)
    {
        setAttribute (mica::Type, type);
    }

public:
    Label (const Label&) = delete;
    Label& operator = (const Label&) = delete;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    mica::Concept getAttribute (mica::Concept key) const
    {
        return attributes_[key];
    }
  
    void setAttribute (mica::Concept key, mica::Concept value) 
    {
        if (!value.isUndefined()) { attributes_[key] = value; }
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Pointer<Stamp> getStamp()
    {
        return stamp_;
    }
    
    Pointer<Engraver> getEngraver()
    {
        return engraver_;
    }
    
    const Table<mica::Concept>& getAttributes() const
    {
        return attributes_;
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setStamp (const Pointer<Stamp>& stamp)
    {
        stamp_ = stamp;
    }
    
    void setEngraver (const Pointer<Engraver>& engraver)
    {
        engraver_ = engraver;
    }

    void setAttributes (const Table<mica::Concept>& attributes)
    {
        attributes_ = attributes;
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    bool operator == (const Label& o) const                         /* For edge equivalence. */
    {
        if (attributes_.size() != o.attributes_.size()) { return false; }
        else {
        //
        for (int i = 0; i < o.attributes_.size(); ++i) {
            mica::Concept key = o.attributes_.getAtIndex (i).getKey();
            if (attributes_[key] != o.attributes_[key]) { 
                return false; 
            }
        }
        //
        }
      
        return true;
    }

private:
    Table<mica::Concept> attributes_;
    Pointer<Engraver> engraver_;
    Pointer<Stamp> stamp_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

using NodePtr    = Pointer<Graph<Label>::Node>;
using MusicGraph = Graph<Label>;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

struct Labels {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static const Label& instantwise()
{
    static Label label (mica::Instantwise);
    return label;
}

static const Label& partwise()
{
    static Label label (mica::Partwise);
    return label;
}

static const Label& token()
{
    static Label label (mica::Token);
    return label;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace belle

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
