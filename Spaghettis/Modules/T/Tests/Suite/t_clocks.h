
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

#ifndef TEST_CLOCKS_H_
#define TEST_CLOCKS_H_

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

#define TEST_CLOCKS_SIZE    32

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

static t_clock*             test_clocksA[TEST_CLOCKS_SIZE];
static t_clock*             test_clocksB[TEST_CLOCKS_SIZE];

static t_int32Atomic        test_clocksStop;
static int                  test_clocksFails;
static t_rand48             test_clocksSeed;

static t_float64Atomic      test_clocksTime;
static int                  test_clocksCounter;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void test_clocksInitialize (t_method taskA, t_method taskB)
{
    int i;
    
    for (i = 0; i < TEST_CLOCKS_SIZE; i++) {
        test_clocksA[i] = clock_newSafe ((void *)NULL, taskA);
        test_clocksB[i] = clock_newSafe ((void *)NULL, taskB);
    }
    
    test_clocksSeed = PD_RAND48_SEED;
}

void test_clocksRelease (void)
{
    int i;
    
    for (i = 0; i < TEST_CLOCKS_SIZE; i++) {
        clock_free (test_clocksA[i]);
        clock_free (test_clocksB[i]);
    }
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

int test_clocksCheck (void)
{
    int i;
    
    for (i = 0; i < TEST_CLOCKS_SIZE; i++) {
        if (!clock_isGood (test_clocksB[i])) { return 0; }
    }
    
    return 1;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void test_clocksTick (double f)
{
    atomic_float64Write (&test_clocksTime, 0); clocks_tick (instance_get()->pd_clocks, f);
}

void test_clocksDebug (int i)
{
    if (i % 1000 == 0) { ttt_stdout (TTT_COLOR_BLUE, "%s", clocks_debug (instance_get()->pd_clocks, 80)); }
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#endif // TEST_CLOCKS_H_

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
