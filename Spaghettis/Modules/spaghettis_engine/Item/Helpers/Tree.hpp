
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace spaghettis::core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

struct Tree {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static bool isObject (const juce::ValueTree& tree)
{
    return (tree.getType() == Id::OBJECT || tree.getType() == Id::PATCH);
}

static bool isLine (const juce::ValueTree& tree)
{
    return (tree.getType() == Id::LINE);
}

static bool isPatch (const juce::ValueTree& tree)
{
    return (tree.getType() == Id::PATCH);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static juce::ValueTree getChild (const juce::ValueTree& t, core::UniqueId i)
{
    return t.getChildWithProperty (Id::identifier, data::Cast::toVar (i));
}

static juce::ValueTree findChild (const juce::ValueTree& t, core::UniqueId i)
{
    juce::ValueTree found (getChild (t, i));
    
    if (!found.isValid()) {
        for (const auto& child : t) {
            if (Tree::isPatch (child)) {
                found = findChild (child, i); if (found.isValid()) { return found; }
            }
        }
    }
    
    return found;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static juce::ValueTree getItemIfChangedPropertyEquals (const juce::ValueTree& t, juce::String key);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis { using Tree = core::Tree; }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
