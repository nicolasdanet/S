
/* Copyright (c) 2023 Spaghettis and others. */

/* < https://www.gnu.org/licenses/agpl-3.0.en.html > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace spaghettis::core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace Point {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

class Real;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

class Scaled {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Scaled (juce::Point<int> pt, float f) : pt_ (pt), f_ (f)
    {
    }
    
    explicit Scaled (int x, int y, float f) : Scaled (juce::Point<int> (x, y), f)
    {
    }
    
    explicit Scaled (const Real&, float f);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    const juce::Point<int>& getPoint() const
    {
        return pt_;
    }
    
    float getScale() const
    {
        return f_;
    }
    
private:
    juce::Point<int> pt_;
    float f_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Real {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Real (juce::Point<int> pt) : pt_ (pt)
    {
    }

    explicit Real (int x, int y) : Real (juce::Point<int> (x, y))
    {
    }
    
    Real (const Scaled&);
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    const juce::Point<int>& getPoint() const
    {
        return pt_;
    }

private:
    juce::Point<int> pt_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

Real operator + (const Real&, const Real&);
Real operator - (const Real&, const Real&);

Real operator + (const Real&, const Vector::Real&);
Real operator - (const Real&, const Vector::Real&);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
