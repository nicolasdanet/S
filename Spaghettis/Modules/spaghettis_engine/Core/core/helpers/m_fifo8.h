
/* Copyright (c) 1997 Miller Puckette and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

#ifndef M_FIFO_8_H_
#define M_FIFO_8_H_

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

/* A fix-sized basic ring buffer for a single writer and a single reader. */
/* Implemented to easily replaced legacy one. */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#define FIFO8_SIZE      131072      /* Must be a power of two. */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

typedef struct _fifo8 {
    char            *f_vector;
    t_uint64Atomic  f_read;
    t_uint64Atomic  f_write;
    } t_fifo8;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

t_fifo8 *fifo8_new (void);

void    fifo8_free (t_fifo8 *x);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

/* Functions below could be called concurrently. */

/* Usable in DSP. */

int fifo8_getAvailableWrite    (t_fifo8 *x);
int fifo8_getAvailableRead     (t_fifo8 *x);
int fifo8_write                (t_fifo8 *x, const void *v, int n);
int fifo8_read                 (t_fifo8 *x, void *v,       int n);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
#endif // M_FIFO_8_H_
