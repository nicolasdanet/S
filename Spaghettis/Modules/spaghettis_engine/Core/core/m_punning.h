
/* Copyright (c) 1997 Miller Puckette and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

#if defined ( __cplusplus )

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

// TODO: Use std::bit_cast C++20?

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

#include <cstring>

template <class To, class From>
std::enable_if_t<
    sizeof (To) == sizeof (From)
        && std::is_trivially_copyable_v<From>
        && std::is_trivially_copyable_v<To>,
    To>
raw_cast (const From& src) noexcept
{
    static_assert (std::is_trivially_constructible_v<To>);
 
    To dst;
    std::memcpy (&dst, &src, sizeof (To));
    return dst;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#include "punning/m_punning32.hpp"
#include "punning/m_punning64.hpp"
#include "punning/m_punning64Shared.h"

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#else

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

/* Assumed type punning valid in C11. */

/* < https://stackoverflow.com/a/11640603 > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#include "punning/m_punning32.h"
#include "punning/m_punning64.h"
#include "punning/m_punning64Shared.h"

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#endif

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static inline t_pun32 pun32_initialize()
{
    t_pun32 t = { 0 }; return t;
}

static inline t_pun64 pun64_initialize()
{
    t_pun64 t = { 0 }; return t;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static inline void pun32_setBitwiseAnd (t_pun32* p, uint32_t i)
{
    pun32_setInteger (p, pun32_getInteger (p) & i);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static inline void pun64_setBitwiseAndMostSignificantBytes (t_pun64* p, uint32_t i)
{
    pun64_setMostSignificantBytes (p, pun64_getMostSignificantBytes (p) & i);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
