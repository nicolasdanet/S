
/* Copyright (c) 2023 Spaghettis and others. */

/* < https://www.gnu.org/licenses/agpl-3.0.en.html > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Normalized {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Normalized (bool isLogarithmic, double min, double max, double interval = 0.0) :
        isLogarithmic_ (isLogarithmic),
        min_ (juce::jmin (min, max)),
        max_ (juce::jmax (min, max)),
        interval_ (interval)
    {
    }
    
    ~Normalized() = default;

public:
    Normalized (const Normalized&) = delete;
    Normalized (Normalized&&) = delete;
    Normalized& operator = (const Normalized&) = delete;
    Normalized& operator = (Normalized&&) = delete;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    bool isValid() const
    {
        return (min_ != max_);
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    juce::NormalisableRange<double> getLinearRange() const
    {
        return juce::NormalisableRange<double> (min_, max_, interval_);
    }
    
    juce::NormalisableRange<double> getLogarithmicRange() const
    {
        return juce::NormalisableRange<double> (min_, max_, interval_, skew_);
    }
    
    juce::NormalisableRange<double> getRange() const
    {
        return isLogarithmic_ ? getLogarithmicRange() : getLinearRange();
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    double convert (double v) const
    {
        if (isValid()) {
        //
        auto r = getRange();
        
        return r.convertTo0to1 (r.snapToLegalValue (v));
        //
        }
        
        return 0.0;
    }
    
    double map (double v) const
    {
        if (isValid()) {
        //
        auto r = getRange();
        
        return r.snapToLegalValue (r.convertFrom0to1 (juce::jlimit (0.0, 1.0, v)));
        //
        }
            
        return min_;
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

private:
    bool isLogarithmic_;
    double min_;
    double max_;
    double interval_;
    
private:
    static constexpr double skew_ = 0.25;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

