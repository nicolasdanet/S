
/* Copyright (c) 2024 Spaghettis and others. */

/* < https://www.gnu.org/licenses/agpl-3.0.en.html > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class ChoicesSource {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

using Generator = std::function<juce::StringArray()>;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

/* The broadcaster if provided MUST overpass the source lifetime. */

public:
    explicit ChoicesSource (Generator f, juce::ChangeBroadcaster* p = nullptr) : f_ (f), broadcaster_ (p)
    {
    }
    
    ~ChoicesSource() = default;

    ChoicesSource (const ChoicesSource&) = default;
    ChoicesSource (ChoicesSource&&) = default;
    ChoicesSource& operator = (const ChoicesSource&) = default;
    ChoicesSource& operator = (ChoicesSource&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool hasBroadcaster() const
    {
        return (broadcaster_ != nullptr);
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void addListener (juce::ChangeListener* listener)
    {
        if (broadcaster_) { broadcaster_->addChangeListener (listener); }
    }

    void removeListener (juce::ChangeListener* listener)
    {
        if (broadcaster_) { broadcaster_->removeChangeListener (listener); }
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::StringArray operator()() const
    {
        return f_();
    }
    
private:
    Generator f_;

private:
    juce::ChangeBroadcaster* broadcaster_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

