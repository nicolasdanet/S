
/* Copyright (c) 2021 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

class PatchWindow;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class PatchRoot {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit PatchRoot (const core::Report& v) : rootTree_ (v.asValueTree()), dirty_ (false)
    {
        openWindow();
    }

    ~PatchRoot()
    {
        Spaghettis()->appendRecentFile (getFile());
        
        releaseAllWindows();
        
        // DBG (core::Data::debug (rootTree_));
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void save() const
    {
        Spaghettis()->handle (Inputs::savePatch (getIdentifier()));
    }
    
    void close (bool saveFirst = false) const
    {
        if (saveFirst) { save(); } Spaghettis()->handle (Inputs::closePatch (getIdentifier()));
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void add (const core::UniquePath&, const core::Report&);
    void change (const core::UniquePath&, const core::Report&);
    void remove (const core::UniquePath&);
    void rename (const core::UniquePath&, core::UniqueId);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void localize (const core::UniquePath&);
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setOrder (const core::UniquePath& u, const std::vector<core::UniqueId>& v);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setDirty (bool isDirty);
    bool isDirty() const;
    
private:
    void updateDirty() const;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void openWindow();
    void openPatchWindow (core::UniqueId);
    void openEditWindow();
    void openRunWindow();
    void closeWindowButtonPressed (PatchWindow*);

private:
    void releaseAllWindows();
    void removeWindow (PatchWindow*);
    
public:
    juce::Component* getMainWindow() const;

private:
    void setDirtyFlagIfRequired() const;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    juce::ValueTree getParent (const core::UniquePath& u) const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    core::UniqueId getIdentifier() const
    {
        return core::Patch (rootTree_).getIdentifier();
    }

    juce::File getFile() const
    {
        return juce::File (core::Patch (rootTree_).get<juce::String> (Tag::Attributes, Tag::Path));
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    juce::ValueTree rootTree_;
    bool dirty_;

private:
    std::vector<std::unique_ptr<PatchWindow>> windows_;

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PatchRoot)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

