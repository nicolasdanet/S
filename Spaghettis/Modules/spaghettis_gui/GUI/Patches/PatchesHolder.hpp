
/* Copyright (c) 2021 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

enum class CloseType    { none, yesNo, yesNoCancel };
enum class CloseResult  { yes, no, cancel };

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class PatchesHolder {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    PatchesHolder()  = default;
    ~PatchesHolder() = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

public:
    void add (const core::UniquePath& u, const core::Report& v);
    void change (const core::UniquePath& u, const core::Report& v);
    void remove (const core::UniquePath& u);
    void rename (const core::UniquePath& u, core::UniqueId i);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setOrder (const core::UniquePath& u, const std::vector<core::UniqueId>& v);
    void setDirty (const core::UniquePath& u, bool isDirty);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void showSaveRequest (const std::shared_ptr<PatchRoot>&, CloseType notify);
    
public:
    void requestClosePatch (core::UniqueId i, CloseType notify);
    void handleSaveRequest (core::UniqueId i, CloseResult result);
    
    bool isAllRequestsDone()
    {
        return requests_.empty();
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool isEmpty() const;
    void closeAllPatches();

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    template <class T> void perform (const core::UniquePath& u, T f) const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    std::vector<std::shared_ptr<PatchRoot>> roots_;
    std::vector<std::shared_ptr<PatchRoot>> requests_;
    
private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PatchesHolder)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

