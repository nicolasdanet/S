
/* Copyright (c) 2021 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

enum class CloseType {
    none,
    yesNo,
    yesNoCancel
};

enum class CloseResult {
    yes,
    no,
    cancel
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class PatchesHolder {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

public:
    PatchesHolder()  = default;
    ~PatchesHolder() = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void add (const core::UniquePath&, const core::Report&);
    void change (const core::UniquePath&, const core::Report&);
    void remove (const core::UniquePath&);
    void rename (const core::UniquePath&, core::UniqueId);
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool locate (const core::UniquePath&);
    bool contains (const core::UniquePath&);
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setOrder (const core::UniquePath&, const std::vector<core::UniqueId>&);
    void setDirty (const core::UniquePath&, bool);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool isEmpty() const;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void requestClosePatch (core::UniqueId, CloseType);
    void requestCloseAllPatches();

public:
    bool isAllRequestsDone() const;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void showSaveRequest (const std::shared_ptr<PatchRoot>&, CloseType);
    void handleSaveRequest (core::UniqueId, CloseResult);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    std::vector<std::shared_ptr<PatchRoot>> roots_;
    std::vector<std::shared_ptr<PatchRoot>> requests_;
    
private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PatchesHolder)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

