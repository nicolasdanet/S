
/* Copyright (c) 2023 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

PinComponent* getPinComponentAt (EditView* view, const juce::Point<int>& pt)
{
    return dynamic_cast<PinComponent*> (view->getComponentAt (pt));
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void unsetPointer (juce::Component::SafePointer<PinComponent>& p)
{
    if (p.getComponent()) { p->setHighlighted (false); p = nullptr; }
}

void setPointer (juce::Component::SafePointer<PinComponent>& p, PinComponent* c)
{
    unsetPointer (p); p = c; if (p.getComponent()) { p->setHighlighted (true); }
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void check (PinComponent* component,
    juce::Component::SafePointer<PinComponent>& source,
    juce::Component::SafePointer<PinComponent>& destination)
{
    if (destination.getComponent() != component) {
        setPointer (destination, component);
    }
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

PinTracker::PinTracker()
{
}

PinTracker::~PinTracker()
{
    unsetPointer (destination_);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void PinTracker::start (EditView* view, const juce::Point<int>& pt)
{
    source_ = getPinComponentAt (view, pt);
}

void PinTracker::hit (EditView* view, const juce::Point<int>& pt)
{
    if (source_.getComponent()) {
    //
    PinComponent* c = getPinComponentAt (view, pt);
    
    if (c != source_.getComponent()) { check (c, source_, destination_); }
    //
    }
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
