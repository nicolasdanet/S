
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class EditPort : public juce::Component {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

friend class ActionHand;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit EditPort (EditView& view);
    
    ~EditPort();

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::Rectangle<int> getGlobalVisibleArea() const;
    juce::Rectangle<int> getRealVisibleArea() const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::Value getZoomAsValue() const;
    int getZoom() const;
    float getScale() const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void zoomIn();
    void zoomOut();
    void zoomReset();

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void locate (core::UniqueId);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void show (ObjectComponent*);
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void mouseWheelMoveDisplace (float x, float y);
    void mouseWheelMoveZoom (float y);
    
private:
    void mouseWheelMove (const juce::MouseEvent&, const juce::MouseWheelDetails&) override;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void dragViewStart();
    void dragView (juce::Point<int>);
    void dragViewEnd();
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void setZoomAroundPoint (int, juce::Point<int>);
    void setZoom (int);
    void update();
    
private:
    EditView& view_;
    int zoom_;
    juce::Value v_;
    juce::Point<int> offset_;                       /* Real coordinates. */
    std::optional<juce::Point<int>> dragOrigin_;    /* Real coordinates. */

private:
    static int nextStep (int step)
    {
        auto r = std::find_if (steps_.cbegin(), steps_.cend(),   [n = step](int i) { return (i > n); });
    
        return (r != steps_.cend()) ? *r : steps_.back();
    }
    
    static int previousStep (int step)
    {
        auto r = std::find_if (steps_.crbegin(), steps_.crend(), [n = step](int i) { return (i < n); });
    
        return (r != steps_.crend()) ? *r : steps_.front();
    }
    
    static constexpr std::array<int, 16> steps_ =
        {
            30, 50, 70, 80, 90, 100, 110, 120, 130, 150, 170, 200, 240, 300, 400, 500
        };
        
private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (EditPort)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

