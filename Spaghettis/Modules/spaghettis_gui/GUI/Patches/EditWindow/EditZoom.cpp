
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

EditZoom::EditZoom (const juce::Value& v) : v_ (v)
{
    setOpaque (false);
    setPaintingIsUnclipped (true);
    setBufferedToImage (true);
        
    v_.addListener (this);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void EditZoom::paint (juce::Graphics& g)
{
    g.setColour (Spaghettis()->getColour (Colours::toolbarZoom));
    g.setFont (Spaghettis()->getLookAndFeel().getTooltipsFont());
    g.drawText (v_.toString() + " %", getLocalBounds(), juce::Justification::centredRight, true);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void EditZoom::mouseEnter (const juce::MouseEvent&)
{
}
    
void EditZoom::mouseExit (const juce::MouseEvent&)
{
}
    
void EditZoom::mouseDown (const juce::MouseEvent&)
{
}
    
void EditZoom::mouseDrag (const juce::MouseEvent&)
{
}
        
void EditZoom::mouseUp (const juce::MouseEvent&)
{
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void EditZoom::valueChanged (juce::Value&)
{
    repaint();
}
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
