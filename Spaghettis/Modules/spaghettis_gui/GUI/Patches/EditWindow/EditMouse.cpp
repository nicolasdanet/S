
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

std::vector<core::UniqueId> getAllObjects (const juce::ValueTree& tree, bool selected)
{
    std::vector<core::UniqueId> v;
    
    for (const auto& t : tree) {
    //
    if (t.hasType (Ids::OBJECT) || t.hasType (Ids::PATCH)) {
        core::Object o (t);
        if (o.getAttribute<bool> (Tags::Selected) == selected) {
            v.push_back (o.getIdentifier());
        }
    }
    //
    }
        
    return v;
}

void deselectAllObjects (const juce::ValueTree& tree)
{
    std::vector<core::UniqueId> v (getAllObjects (tree, true));
    
    for (const auto& i : v) { EditCommands::deselect (i); }
}

void selectAllObjects (const juce::ValueTree& tree)
{
    std::vector<core::UniqueId> v (getAllObjects (tree, false));
    
    for (const auto& i : v) { EditCommands::select (i); }
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void EditView::mouseDown (const juce::MouseEvent& e)
{
    if (Mouse::isSimpleClick (e)) { deselectAllObjects (viewTree_); }
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void EditView::selectAll()
{
    selectAllObjects (viewTree_);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
