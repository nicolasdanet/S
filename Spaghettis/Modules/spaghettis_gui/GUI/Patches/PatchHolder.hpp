
/* Copyright (c) 2021 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

enum class CloseType { none, yesNo, yesNoCancel };

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class PatchHolder {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    PatchHolder()  = default;
    ~PatchHolder() = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

public:
    void addObject (const core::Unique& u, const core::Description& v)
    {
        DBG (v.debug());
        
        if (u.isRoot()) { createPatch (u, v); }
        else {
            perform (u, [&] (const std::shared_ptr<Patch>& p) { p->addObject (u, v); });
        }
    }

    void changeObject (const core::Unique& u, const core::Description& v)
    {
        if (u.isRoot()) { changePatch (u, v); }
        else {
            perform (u, [&] (const std::shared_ptr<Patch>& p) { p->changeObject (u, v); });
        }
    }
    
    void removeObject (const core::Unique& u)
    {
        if (u.isRoot()) { requestClosePatch (u, CloseType::none); }
        else {
            perform (u, [&] (const std::shared_ptr<Patch>& p) { p->removeObject (u); });
        }
    }

    void renameObject (const core::Unique& u, core::Unique::Identifier i)
    {

    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setDirty (const core::Unique& u, bool isDirty)
    {
        perform (u, [&] (const std::shared_ptr<Patch>& p) { p->setDirty (isDirty); });
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void closeAllPatches();

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void showSaveRequest (const std::shared_ptr<Patch>&, CloseType notify);
    
public:
    void handleSaveRequest (const core::Unique& u, int result);
    
    bool isAllRequestsDone()
    {
        return requests_.empty();
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void createPatch (const core::Unique& u, const core::Description& v);
    void changePatch (const core::Unique& u, const core::Description& v);

public:
    void requestClosePatch (const core::Unique& u, CloseType notify);
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    template <class T> void perform (const core::Unique& u, T f) const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    std::vector<std::shared_ptr<Patch>> roots_;
    std::vector<std::shared_ptr<Patch>> requests_;
    
private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PatchHolder)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

