
/* Copyright (c) 2024 Spaghettis and others. */

/* < https://www.gnu.org/licenses/agpl-3.0.en.html > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

class PatchBase {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit PatchBase (PatchRoot& patch, const juce::ValueTree& tree) : patch_ (patch), viewTree_ (tree)
    {
    }
    
    virtual ~PatchBase() = default;

public:
    PatchBase (const PatchBase&) = default;
    PatchBase (PatchBase&&) = default;

public:
    PatchBase& operator = (const PatchBase&) = delete;
    PatchBase& operator = (PatchBase&&) = delete;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    PatchRoot& getPatchRoot()
    {
        return patch_;
    }
    
    juce::ValueTree& getViewTree()
    {
        return viewTree_;
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    core::Patch getPatch() const
    {
        return core::Patch (viewTree_);
    }
    
    core::UniqueId getIdentifier() const
    {
        return getPatch().getIdentifier();
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool isLocked() const
    {
        return (getPatch().isAbstraction() || getPatch().isLocked());
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool isSameAsPatch (const juce::ValueTree& t) const
    {
        return (t == viewTree_);
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    PatchRoot& patch_;
    
private:
    juce::ValueTree viewTree_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

