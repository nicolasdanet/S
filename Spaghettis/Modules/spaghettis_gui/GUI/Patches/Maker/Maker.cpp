
/* Copyright (c) 2023 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

Maker::Maker (EditView* owner) : owner_ (owner), tracker_ (owner), v_()
{
    Maker::setActive (v_, false);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void Maker::showEditor (const std::optional<juce::Point<int>>& a, const std::optional<juce::Point<int>>& b)
{
    if (a.has_value() && b.has_value()) {
    //
    Maker::setActive (v_, true);
    
    pt_ = b.value();
    
    auto t = std::make_unique<MakerComponent> (owner_, v_, pt_);
    auto r = juce::Rectangle<int> (4, 4).withCentre (a.value());
    
    tracker_.track (juce::CallOutBox::launchAsynchronously (std::move (t), r, nullptr));
    //
    }
}

void Maker::hideEditor()
{
    tracker_.dismiss();
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

bool Maker::isActive() const
{
    return (v_.getValue().isVoid() == false);
}

std::tuple<juce::Point<int>, juce::String> Maker::getContent() const
{
    return { pt_, v_.toString() };
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void Maker::setActive (juce::Value& v, bool isActive)
{
    v.setValue (isActive ? juce::var (juce::String()) : juce::var());
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
