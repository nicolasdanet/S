
/* Copyright (c) 2021 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Patch {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Patch (const core::Unique& u, const core::Description& v) :
        unique_ (u),
        file_ (v.getProperty (Ids::path).toString()),
        tree_ (v.getTree()),
        dirty_ (false)
    {
        setIdentifier (tree_, unique_.getRoot());
    }

    ~Patch()
    {
        DBG (tree_.toXmlString());
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void save() const
    {
        Spaghettis()->handle (Inputs::savePatch (unique_.getRoot()));
    }
    
    void close (bool saveFirst = false) const
    {
        if (saveFirst) { save(); } Spaghettis()->handle (Inputs::closePatch (unique_.getRoot()));
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void addObject (const core::Unique& u, const core::Description& v);
    void removeObject (const core::Unique& u);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    juce::ValueTree getParentFor (const core::Unique& u) const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setDirty (bool isDirty)
    {
        dirty_ = isDirty;
    }
    
    bool isDirty() const
    {
        return dirty_;
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    core::Unique getUnique() const
    {
        return unique_;
    }
    
    juce::File getFile() const
    {
        return file_;
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static void setIdentifier (juce::ValueTree& t, core::Unique::Identifier i)
    {
        t.setProperty (Ids::identifier, core::Unique::Converter::toVar (i), nullptr);
    }
    
    static bool hasIdentifier (const juce::ValueTree& t, core::Unique::Identifier i)
    {
        return (i == core::Unique::Converter::fromVar (t.getProperty (Ids::identifier)));
    }
    
    static juce::ValueTree getChildWithIdentifier (const juce::ValueTree& t, core::Unique::Identifier i)
    {
        return t.getChildWithProperty (Ids::identifier, core::Unique::Converter::toVar (i));
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    core::Unique unique_;
    juce::File file_;
    juce::ValueTree tree_;
    bool dirty_;

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Patch)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

