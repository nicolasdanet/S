
/* Copyright (c) 2021 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Patch {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Patch (const core::Unique& u, const core::Description& v) :
        u_ (u),
        p_ (v.getTree()),
        dirty_ (false)
    {
        DBG (v.debug()); jassert (p_.getProperty (Ids::type).equalsWithSameType ("patch"));

        p_.setProperty (Ids::identifier, core::Unique::Converter::toVar (u.getIdentifier()), nullptr);
    }

    ~Patch() = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void close()
    {
        Spaghettis()->handle (Inputs::closePatch (u_.getIdentifier()));
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void addObject (const core::Unique& u, const core::Description& v)
    {
        // DBG (v.debug());
    }
    
    void removeObject (const core::Unique& u)
    {
        // DBG (u.debug());
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    core::Unique getUnique() const
    {
        return u_;
    }

    void setDirty (bool isDirty)
    {
        dirty_ = isDirty;
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    core::Unique u_;
    juce::ValueTree p_;
    bool dirty_;

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Patch)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

