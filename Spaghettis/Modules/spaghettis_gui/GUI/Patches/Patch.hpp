
/* Copyright (c) 2021 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

class PatchWindow;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Patch {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Patch (const core::Unique& u, const core::Description& v) :
        unique_ (u),
        tree_ (v),
        dirty_ (false)
    {
        openWindow();
    }

    ~Patch()
    {
        releaseAllWindows();
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setDirty (bool isDirty);
    void updateDirty() const;
    bool isDirty() const;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void save() const
    {
        Spaghettis()->handle (Inputs::savePatch (unique_.getRoot()));
    }
    
    void close (bool saveFirst = false) const
    {
        if (saveFirst) { save(); } Spaghettis()->handle (Inputs::closePatch (unique_.getRoot()));
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void addObject (const core::Unique& u, const core::Description& v);
    void changeObject (const core::Unique& u, const core::Description& v);
    void removeObject (const core::Unique& u);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void openWindow();
    void openEditWindow();
    void openRunWindow();
    void closeWindowButtonPressed (PatchWindow*);

private:
    void releaseAllWindows();
    void removeWindow (PatchWindow*);
    
public:
    juce::Component* getMainWindow() const;

private:
    void setDirtyFlagIfRequired() const;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    juce::ValueTree getParent (const core::Unique& u) const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    core::Unique getUnique() const
    {
        return unique_;
    }

    juce::File getFile() const
    {
        return juce::File (core::Description::getAttribute (tree_, Ids::path).toString());
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    core::Unique unique_;
    juce::ValueTree tree_;
    bool dirty_;

private:
    std::vector<std::unique_ptr<PatchWindow>> windows_;

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Patch)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

