
/* Copyright (c) 2023 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

struct Helpers {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static juce::String firstLetterCapitalized (const juce::String& s)
{
    return s.substring (0, 1).toUpperCase() + s.substring (1);
}

static juce::String upToWhitespace (const juce::String& s)
{
    return s.upToFirstOccurrenceOf (" ", false, false);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static juce::String trimZerosOfInteger (juce::String t)
{
    const int i = t.indexOfChar ('.');
    
    if (i > 0) {
    //
    const int n = t.lastIndexOfAnyOf ("123456789");
    
    if (n < i) { t = t.substring (0, i); }
    //
    }
    
    return t;
}

static juce::String withNumberOfDigits (double f, int n, bool trimZeros = true)
{
    jassert (n > 0);
        
    juce::String s (f, n);
    juce::String t;

    for (auto c : s) {
        if (n <= 0) { break; }
        else {
            t += c; if (juce::CharacterFunctions::isDigit (c)) { --n; }
        }
    }
    
    return trimZeros ? trimZerosOfInteger (t) : t;
}

static int getNumberOfDigitsAfterDecimalSeparator (const juce::String& s)
{
    const int i = s.indexOfChar ('.');
    
    return (i >= 0) ? (s.length() - i - 1) : 0;
}

static int getNumberOfDigitsOfIntegerPart (double f)
{
    return 0;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static juce::SparseSet<int> getSparseSetFor (int i)
{
    juce::SparseSet<int> set; set.addRange ({i, i + 1}); return set;
}
 
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

