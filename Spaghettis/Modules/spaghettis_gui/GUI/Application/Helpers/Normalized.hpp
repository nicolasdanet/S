
/* Copyright (c) 2023 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Normalized {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Normalized (bool isLogarithmic, double min, double max, double interval = 0.0) :
        isLogarithmic_ (isLogarithmic),
        r_ (min, max),
        interval_ (interval)
    {
    }
    
    ~Normalized() = default;

public:
    Normalized (const Normalized&) = delete;
    Normalized (Normalized&&) = delete;
    Normalized& operator = (const Normalized&) = delete;
    Normalized& operator = (Normalized&&) = delete;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    juce::NormalisableRange<double> getLinearRange() const
    {
        return juce::NormalisableRange<double> (r_.getStart(), r_.getEnd(), interval_);
    }
    
    juce::NormalisableRange<double> getLogarithmicRange() const
    {
        return juce::NormalisableRange<double> (r_.getStart(), r_.getEnd(), interval_, skew_);
    }
    
    juce::NormalisableRange<double> getRange() const
    {
        return isLogarithmic_ ? getLogarithmicRange() : getLinearRange();
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    double convert (double v) const
    {
        auto r = getRange(); return r.convertTo0to1 (r.snapToLegalValue (v));
    }
    
    double map (double v) const
    {
        auto r = getRange(); return r.snapToLegalValue (r.convertFrom0to1 (v));
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

private:
    bool isLogarithmic_;
    juce::Range<double> r_;
    double interval_;
    
private:
    static constexpr double skew_ = 0.25;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

