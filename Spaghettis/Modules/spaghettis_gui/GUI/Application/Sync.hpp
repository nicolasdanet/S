
/* Copyright (c) 2023 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Sync {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Sync (const core::Item& item) : source_ (item), synchronized_ (item.getData())
    {
        /*
        if (!i.isPatch()) {
        if (!i.isLine())  {
            findDocumentationForClass (i.getData(), i.get<juce::String> (Tag::Attributes, Tag::Class));
        }
        }
        */
    }
    
    ~Sync() = default;
    
public:
    Sync (const Sync&) = default;
    Sync (Sync&&) = default;
    Sync& operator = (const Sync&) = default;
    Sync& operator = (Sync&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    core::Data getData() const
    {
        return synchronized_;
    }

    core::UniqueId getIdentifier() const
    {
        return source_.getIdentifier();
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void addObserver (core::Observer* observer)
    {
        synchronized_.addObserver (observer);
    }
    
    void removeObserver (core::Observer* observer)
    {
        synchronized_.removeObserver (observer);
    }
    
private:
    core::Item source_;
    core::Data synchronized_;
    
private:
    JUCE_LEAK_DETECTOR (Sync)
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
