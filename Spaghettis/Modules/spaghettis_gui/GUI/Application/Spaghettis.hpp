
/* Copyright (c) 2021 Nicolas Danet. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Spaghettis() : lookAndFeel_ (std::make_unique<LookAndFeel>())
    {
    }
    
    ~Spaghettis()
    {
        clearSingletonInstance();
    }

    JUCE_DECLARE_SINGLETON_SINGLETHREADED (Spaghettis, true)
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setLogger (Logger* logger)
    {
        logger_ = logger;
    }
    
public:
    LookAndFeel* getLookAndFeel() const
    {
        return lookAndFeel_.get();
    }
    
private:
    std::unique_ptr<LookAndFeel> lookAndFeel_;
    Logger *logger_;

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Spaghettis)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class SpaghettisPointer {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    SpaghettisPointer (bool owner = false) : owned_ (owner), spaghettis_ (Spaghettis::getInstance())
    {
        jassert (spaghettis_ != nullptr);
    }
    
    ~SpaghettisPointer()
    {
        if (owned_) { Spaghettis::deleteInstance(); } spaghettis_ = nullptr;
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Spaghettis* operator ->() const
    {
        jassert (Spaghettis::getInstanceWithoutCreating() != nullptr);
        
        return spaghettis_;
    }

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SpaghettisPointer)
    
private:
    bool owned_;
    Spaghettis *spaghettis_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
