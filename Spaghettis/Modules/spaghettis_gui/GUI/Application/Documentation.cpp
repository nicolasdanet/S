
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

Documentation::Documentation (const core::Object& o) : data_ (find (o))
{
    DBG (core::Data::debug (data_));
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void addDocumentationForClass (core::Data data, const juce::String& c)
{
    const juce::String name  = juce::String ("info_") + c + juce::String ("_xml");
    int n = 0; const char* p = BinaryData::getNamedResource (name.toRawUTF8(), n);
    
    if (n && p) {
    //
    data.addParametersFromXml (juce::String::createStringFromData (p, n));
    //
    }
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

core::Item Documentation::copy (const core::Item& item)
{
    core::Item i (core::Item::createCopy (item));
    
    if (i.isObject() && !i.isPatch()) {
        addDocumentationForClass (i.getData(), i.get<juce::String> (Tags::Attributes, Tags::Class));
    }
    
    return i;
}

core::Data Documentation::find (const core::Object& o)
{
    core::Data data (Ids::DOCUMENTATION);
    
    if (!o.isPatch()) {
        addDocumentationForClass (data, o.get<juce::String> (Tags::Attributes, Tags::Class));
    }
    
    return data;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
