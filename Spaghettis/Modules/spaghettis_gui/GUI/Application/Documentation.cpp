
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

// TODO: Cache documentation for efficiency?

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

void findDocumentationForClass (core::Data& data, const juce::String& c)
{
    if (c.isNotEmpty()) {
    //
    const juce::String name  = juce::String ("info_") + c + juce::String ("_xml");
    int n = 0; const char* p = BinaryData::getNamedResource (name.toRawUTF8(), n);
    
    if (n && p) {
    //
    data.addParametersFromXml (juce::String::createStringFromData (p, n));
    //
    }
    //
    }
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

core::Data Documentation::get (const core::Item& i)
{
    core::Data data (Id::DOCUMENTATION);
    
    if (i.has (Tag::Attributes, Tag::Class)) {
        findDocumentationForClass (data, i.get<juce::String> (Tag::Attributes, Tag::Class));
    }
    
    return data;
}

core::Data Documentation::getCopyExtended (const core::Item& item)
{
    core::Data data (core::Data::makeCopy (item.getData()));

    if (!item.isPatch()) {
    if (!item.isLine())  {
        findDocumentationForClass (data, item.get<juce::String> (Tag::Attributes, Tag::Class));
    }
    }
    
    return data;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
