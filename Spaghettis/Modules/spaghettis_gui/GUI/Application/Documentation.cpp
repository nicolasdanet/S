
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

// TODO: Cache documentation to avoid memory consumption?

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void findDocumentationForClass (core::Data& data, const juce::String& c)
{
    const juce::String name  = juce::String ("info_") + c + juce::String ("_xml");
    int n = 0; const char* p = BinaryData::getNamedResource (name.toRawUTF8(), n);
    
    if (n && p) {
    //
    data.addParametersFromXml (juce::String::createStringFromData (p, n));
    //
    }
}

core::Data makeDocumentation (const core::Object& o)
{
    core::Data data (Id::DOCUMENTATION);
    
    if (!o.isPatch()) {
        findDocumentationForClass (data, o.get<juce::String> (Tag::Attributes, Tag::Class));
    }
    
    return data;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

Documentation::Documentation (const core::Object& o) : data_ (makeDocumentation (o))
{
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

juce::String Documentation::getPinTooltip (const juce::String& type, bool isOutlet, int i) const
{
    const juce::String t = firstLetterCapitalized (type);
    const juce::String k = (isOutlet ? Tag::Outlet : Tag::Inlet) + juce::String (i);
    
    if (data_.hasParameter (Tag::Documentation, k)) {
        return t + ": " + data_.getParameter (Tag::Documentation, k).getValueTyped<juce::String>();
    }
    
    return t;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

core::Data Documentation::getCopyOfDataExtended (const core::Item& item)
{
    core::Data data (core::Data::makeCopy (item.getData()));

    if (!item.isPatch()) {
    if (!item.isLine())  {
        findDocumentationForClass (data, item.get<juce::String> (Tag::Attributes, Tag::Class));
    }
    }
    
    return data;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

juce::String Documentation::firstLetterCapitalized (juce::String s)
{
    return s.substring (0, 1).toUpperCase() + s.substring (1);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
