
/* Copyright (c) 2021 Spaghettis and others. */

/* < https://www.gnu.org/licenses/agpl-3.0.en.html > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace spaghettis::core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

struct _object;
struct _glist;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

using UniqueId = uint64_t;  /* t_id */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

class UniquePath {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit UniquePath (struct _object* o);
    explicit UniquePath (UniqueId u, struct _glist* owner);
    
    ~UniquePath() = default;

private:
    explicit UniquePath();
    
public:
    UniquePath (const UniquePath&) = default;
    UniquePath (UniquePath&&) = default;
    UniquePath& operator = (const UniquePath&) = default;
    UniquePath& operator = (UniquePath&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::String toString() const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool isValid() const
    {
        return u_ != 0;
    }
    
    bool isRoot() const
    {
        return r_ == 0;
    }

    UniqueId getRoot() const
    {
        return isRoot() ? u_ : r_;
    }
    
    UniqueId getIdentifier() const
    {
        return u_;
    }
    
    bool hasPath() const
    {
        return (path_ != nullptr);
    }
    
    const std::vector<UniqueId>& getPath() const
    {
        jassert (hasPath()); return *path_;
    }
    
    bool isInsideAbstraction() const
    {
        return inside_;
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static UniquePath invalid()
    {
        return UniquePath();
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

/* < https://en.cppreference.com/w/cpp/memory/shared_ptr > */
    
/*
    "All member functions (including copy constructor and copy assignment) can be called by multiple threads
    on different instances of shared_ptr without additional synchronization even if these instances
    are copies and share ownership of the same object."
    
    Note that only copies of UniquePath are passed from the control to GUI thread.
    Note that owned content is read only.
    Thus assumed thread safe!
*/
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

private:
    UniqueId u_;
    UniqueId r_;
    
private:
    std::shared_ptr<std::vector<UniqueId>> path_;

private:
    bool inside_;

private:
    JUCE_LEAK_DETECTOR (UniquePath)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
