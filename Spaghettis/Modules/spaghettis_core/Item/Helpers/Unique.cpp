
/* Copyright (c) 2021 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis::core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

std::vector<UniqueId> fetchIdentifiersFromRoot (t_glist* owner)
{
    std::vector<UniqueId> t;
    
    while (owner) {
    //
    t.insert (t.cbegin(), object_getUnique (cast_object (owner)));

    owner = glist_getParent (owner);
    //
    }
    
    return t;
}

void fetchUniquePath (t_glist* owner, UniqueId& r, std::shared_ptr<std::vector<UniqueId>>& path, bool& b)
{
    if (owner) {
    //
    std::vector<UniqueId> t (fetchIdentifiersFromRoot (owner));
    
    if (!t.empty()) { r = t.front(); t.erase (t.cbegin()); }
    if (!t.empty()) { path = std::make_shared<std::vector<UniqueId>> (std::move (t)); }
    
    b = static_cast<bool> (glist_isAbstractionOrInside (owner));
    //
    }
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

UniquePath::UniquePath() : u_ (0), r_ (0), inside_ (false)
{

}

UniquePath::UniquePath (t_object* o) : u_ (object_getUnique (o)), r_ (0), inside_ (false)
{
    fetchUniquePath (object_getOwner (o), r_, path_, inside_);
}

UniquePath::UniquePath (UniqueId u, t_glist* owner) : u_ (u), r_ (0), inside_ (false)
{
    fetchUniquePath (owner, r_, path_, inside_);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

juce::String UniquePath::debug() const
{
    juce::StringArray s;
    
    s.add (isRoot() ? juce::String ("-") : juce::String (r_));
    
    if (path_) { for (auto& u : *path_) { s.add (juce::String (u)); } }
    
    s.add (juce::String (u_));
            
    return (s.joinIntoString (" / "));
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
