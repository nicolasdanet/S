
/* Copyright (c) 2021 Nicolas Danet. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

struct _object;
struct _glist;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

class Unique {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

public:
    using Identifier = uint64_t;                                            /* t_id */
    
    using Converter  = juce::VariantConverter<Unique::Identifier>;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -
        
public:
    explicit Unique (struct _object *o, struct _glist *owner);
    
    ~Unique() = default;

private:
    explicit Unique();
    
public:
    Unique (const Unique&) = default;
    Unique (Unique&&) = default;
    Unique& operator = (const Unique&) = default;
    Unique& operator = (Unique&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::String debug() const
    {
        juce::StringArray s;
        
        for (auto& u : *path_) { s.add (juce::String (u)); }
        
        return (s.joinIntoString (" / "));
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool isValid() const
    {
        return u_ != 0;
    }
    
    bool isRoot() const
    {
        return path_->empty();
    }

    Unique::Identifier getRoot() const
    {
        if (isRoot()) { return u_; } else { return path_->front(); }
    }
    
    Unique::Identifier getIdentifier() const
    {
        return u_;
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static Unique invalid()
    {
        return Unique();
    }


private:
    Unique::Identifier u_;
        
private:
    std::shared_ptr<std::vector<Unique::Identifier>> path_;

private:
    JUCE_LEAK_DETECTOR (Unique)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace core

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace juce {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

template<> struct VariantConverter<spaghettis::core::Unique::Identifier> {

static spaghettis::core::Unique::Identifier fromVar (const var& v)
{
    return static_cast<spaghettis::core::Unique::Identifier> (static_cast<int64> (v));
}
    
static var toVar (const spaghettis::core::Unique::Identifier& i)
{
    return var (static_cast<int64> (i));
}

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace juce

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
