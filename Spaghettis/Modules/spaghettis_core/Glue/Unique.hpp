
/* Copyright (c) 2021 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace spaghettis::core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

struct _object;
struct _glist;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

using UniqueId = uint64_t;  /* t_id */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

class UniquePath {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -
        
public:
    explicit UniquePath (struct _object* o, struct _glist* owner);
    explicit UniquePath (UniqueId u, struct _glist* owner);
    
    ~UniquePath() = default;

private:
    explicit UniquePath();
    
public:
    UniquePath (const UniquePath&) = default;
    UniquePath (UniquePath&&) = default;
    UniquePath& operator = (const UniquePath&) = default;
    UniquePath& operator = (UniquePath&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::String debug() const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool isValid() const
    {
        return u_ != 0;
    }
    
    bool isRoot() const
    {
        return r_ == 0;
    }

    UniqueId getRoot() const
    {
        return isRoot() ? u_ : r_;
    }
    
    UniqueId getIdentifier() const
    {
        return u_;
    }
    
    bool hasPath() const
    {
        return (path_ != nullptr);
    }
    
    const std::vector<UniqueId>& getPath() const
    {
        jassert (hasPath()); return *path_;
    }
    
    bool isInsideAbstraction() const
    {
        return inside_;
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static UniquePath invalid()
    {
        return UniquePath();
    }

private:
    UniqueId u_;
    UniqueId r_;
        
private:
    std::shared_ptr<std::vector<UniqueId>> path_;

private:
    bool inside_;

private:
    JUCE_LEAK_DETECTOR (UniquePath)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace juce {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

template<> struct VariantConverter<spaghettis::core::UniqueId> {

static spaghettis::core::UniqueId fromVar (const var& v)
{
    return static_cast<spaghettis::core::UniqueId> (static_cast<int64> (v));
}
    
static var toVar (const spaghettis::core::UniqueId& i)
{
    return var (static_cast<int64> (i));
}

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace juce

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
