
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Parameter {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Parameter (const juce::ValueTree& parameter) : parameter_ (parameter)
    {
    }
    
    ~Parameter() = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    template <class T> void setRange (juce::Range<T> range)
    {
        parameter_.setProperty (Ids::minimum, range.getStart(), nullptr);
        parameter_.setProperty (Ids::maximum, range.getEnd(), nullptr);
    }
    
public:
    Parameter (const Parameter&) = default;
    Parameter (Parameter&&) = default;
    Parameter& operator = (const Parameter&) = default;
    Parameter& operator = (Parameter&&) = default;
    
private:
    juce::ValueTree parameter_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Group {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Group (const juce::ValueTree& group) : group_ (group)
    {
    }
    
    ~Group() = default;
    
public:
    Group (const Group&) = default;
    Group (Group&&) = default;
    Group& operator = (const Group&) = default;
    Group& operator = (Group&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Parameter addParameter (const juce::String&, const juce::String&, const juce::String&, bool);
    Parameter addParameter (const juce::String&, const juce::String&, const juce::String&, juce::Colour c);
    Parameter addParameter (const juce::String&, const juce::String&, const juce::String&, int n);
    Parameter addParameter (const juce::String&, const juce::String&, const juce::String&, double f);
    Parameter addParameter (const juce::String&, const juce::String&, const juce::String&, const juce::String& s);
        
private:
    juce::ValueTree group_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

struct Tree {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static Group addGroup (juce::ValueTree& tree, const juce::String& name);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static bool isValid (const juce::ValueTree& tree, const juce::Identifier& identifier);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace core

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
