
/* Copyright (c) 2023 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace spaghettis::core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

juce::Point<int> Geometry::scaled (juce::Point<int> pt, float f)
{
    return juce::Point<int> (pt.x * f, pt.y * f);
}

juce::Point<int> Geometry::unscaled (juce::Point<int> pt, float f)
{
    return juce::Point<int> (pt.x / f, pt.y / f);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

juce::Point<int> relocated (juce::Point<int> pt)
{
    const int x = pt.getX() + Canvas::getOffset();
    const int y = pt.getY() + Canvas::getOffset();
    
    return juce::Point<int> (x, y);
}

juce::Point<int> unrelocated (juce::Point<int> pt)
{
    const int x = pt.getX() - Canvas::getOffset();
    const int y = pt.getY() - Canvas::getOffset();
    
    return juce::Point<int> (x, y);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

juce::Point<int> Geometry::realToScaled (juce::Point<int> pt, float f)
{
    return scaled (relocated (pt), f);
}

juce::Point<int> Geometry::scaledToReal (juce::Point<int> pt, float f)
{
    return unrelocated (unscaled (pt, f));
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
