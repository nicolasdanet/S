
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace spaghettis::core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

struct Coordinates {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static juce::Point<int> realToLocal (juce::Point<int> pt)
{
    return juce::Point (Canvas::addOffset (pt.getX()), Canvas::addOffset (pt.getY()));
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static juce::Point<int> localToReal (juce::Point<int> pt)
{
    return juce::Point (Canvas::removeOffset (pt.getX()), Canvas::removeOffset (pt.getY()));
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

struct Geometry {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static juce::Point<int> scaled (juce::Point<int> pt, float f)
{
    return juce::Point<int> (pt.x * f, pt.y * f);
}

static juce::Point<int> unscaled (juce::Point<int> pt, float f)
{
    return juce::Point<int> (pt.x / f, pt.y / f);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static juce::Point<int> relocated (juce::Point<int> pt)
{
    const int x = pt.getX() + Canvas::getOffset();
    const int y = pt.getY() + Canvas::getOffset();
    
    return juce::Point<int> (x, y);
}

static juce::Point<int> unrelocated (juce::Point<int> pt)
{
    const int x = pt.getX() - Canvas::getOffset();
    const int y = pt.getY() - Canvas::getOffset();
    
    return juce::Point<int> (x, y);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

static juce::Point<int> realToScaled (juce::Point<int> pt, float f)
{
    return scaled (relocated (pt), f);
}

static juce::Point<int> scaledToReal (juce::Point<int> pt, float f)
{
    return unrelocated (unscaled (pt, f));
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis { using Coordinates = core::Coordinates; }
namespace spaghettis { using Geometry    = core::Geometry; }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
