
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Parameter {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Parameter (const juce::ValueTree& parameter = juce::ValueTree()) : parameter_ (parameter)
    {
    }
    
    ~Parameter() = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool isBoolean() const;
    bool isColour() const;
    bool isInteger() const;
    bool isFloat() const;
    bool isText() const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::String getKey() const;
    juce::String getType() const;
    juce::String getText() const;
    juce::String getInfo() const;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Parameter& setText (const juce::String&);
    Parameter& setInfo (const juce::String&);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::var    getValue() const;
    juce::Value  getSource();

public:
    void setValue (const juce::var&);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    template <class T> Parameter& setRange (juce::Range<T> range)
    {
        parameter_.setProperty (Ids::minimum, range.getStart(), nullptr);
        parameter_.setProperty (Ids::maximum, range.getEnd(), nullptr);
        
        return *this;
    }

    template <class T> operator juce::Range<T>() const
    {
        auto m = static_cast<T> (parameter_.getProperty (Ids::minimum));
        auto n = static_cast<T> (parameter_.getProperty (Ids::maximum));
        auto minimum = juce::jmin (m, n);
        auto maximum = juce::jmax (m, n);
            
        if (minimum != maximum) { return juce::Range<T> (minimum, maximum); }
        else {
            return juce::Range<T>();
        }
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool hasRange() const;
    double getMinimumAsDouble() const;
    double getMaximumAsDouble() const;
    double getStep() const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    const juce::var& get (const juce::Identifier&) const;
    
private:
    juce::var constrained (const juce::var& v) const;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool isValid() const;
    
public:
    Parameter (const Parameter&) = default;
    Parameter (Parameter&&) = default;
    Parameter& operator = (const Parameter&) = default;
    Parameter& operator = (Parameter&&) = default;
    
private:
    juce::ValueTree parameter_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace core

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
