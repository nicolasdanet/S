
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

template <class T> class Cached : private juce::Value::Listener {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    explicit Cached (const core::Data& data, const juce::String& group, const juce::String& key) :
        value_ (data.getParameter (group, key).getValueSource())
    {
        value_.addListener (this);
    }

public:
    ~Cached() = default;

public:
    Cached (Cached&&) = default;
    Cached& operator = (Cached&&) = default;
    Cached (const Cached&) = delete;
    Cached& operator = (const Cached&) = delete;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    T get() const
    {
        return cast::fromVar<T> (value_.getValue());
    }
    
    operator T() const
    {
        return get();
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void attach (juce::Component* component)
    {
        auto f = [c = juce::Component::SafePointer<juce::Component>(component)]()
        {
            if (c.getComponent()) { c->repaint(); } else { jassertfalse; }
        };
        
        onChange = f;
    }
    
private:
    void valueChanged (juce::Value& value) override
    {
        if (onChange != nullptr) { onChange(); }
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static Cached make (const core::Data& data, const juce::String& group, const juce::String& key)
    {
        jassert (data.getParameter (group, key).getType() == ParameterType<T>::get());

        return Cached (data, group, key);
    }

private:
    std::function<void()> onChange;
    
private:
    juce::Value value_;
    
private:
    JUCE_LEAK_DETECTOR (Cached)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace core

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

