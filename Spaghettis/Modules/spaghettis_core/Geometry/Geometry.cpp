
/* Copyright (c) 2023 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace spaghettis::core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

juce::Point<int> Geometry::scaled (juce::Point<int> pt, float f)
{
    return juce::Point<int> (pt.x * f, pt.y * f);
}

juce::Point<int> Geometry::unscaled (juce::Point<int> pt, float f)
{
    return juce::Point<int> (pt.x / f, pt.y / f);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

/* Negative coordinates are not well supported by the JUCE framework. */
/* An offset is added to objects positions. */
/* That way the origin is put at the middle. */
/* It should not remain negative values. */
/* That offset is removed later to keep compatiblity with legacy format. */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

constexpr int getCanvasSize()
{
    return 65536;                   /* Arbitrary. */
}

constexpr int getCanvasOffset()
{
    return getCanvasSize() / 2;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

juce::Point<int> relocated (juce::Point<int> pt)
{
    const int x = pt.getX() + getCanvasOffset();
    const int y = pt.getY() + getCanvasOffset();
    
    return juce::Point<int> (x, y);
}

juce::Point<int> unrelocated (juce::Point<int> pt)
{
    const int x = pt.getX() - getCanvasOffset();
    const int y = pt.getY() - getCanvasOffset();
    
    return juce::Point<int> (x, y);
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

juce::Point<int> Geometry::realToScaled (juce::Point<int> pt, float f)
{
    return scaled (relocated (pt), f);
}

juce::Point<int> Geometry::scaledToReal (juce::Point<int> pt, float f)
{
    return unrelocated (unscaled (pt, f));
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

juce::Rectangle<int> Geometry::getCanvasAt (const Point::Scaled& pt)
{
    const Vector::Scaled v (Vector::Real (getCanvasSize(), getCanvasSize()), pt.getScale());
    
    return juce::Rectangle<int> (v.getPoint().getX(), v.getPoint().getY()) - pt.getPoint();
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
