
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class FilterBase : public juce::Value::ValueSource, private juce::Value::Listener {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

protected:
    explicit FilterBase (const juce::Value& origin) : origin_ (origin)
    {
        origin_.addListener (this);
    }

    ~FilterBase() = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    juce::var getValue() const override
    {
        return origin_.getValue();
    }

    void valueChanged (juce::Value&) override
    {
        sendChangeMessage (true);
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

protected:
    void setValueProceed (const juce::var& newValue)
    {
        const juce::var oldValue (origin_.getValue());
        
        if (!newValue.equals (oldValue)) {
            jassert (oldValue.hasSameTypeAs (newValue));
            origin_ = newValue;
            sendChangeMessage (false);
        }
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

protected:
    template <class T> juce::var cast (const juce::var& v)
    {
        return juce::var (static_cast<T> (v));
    }
    
    template <> juce::var cast<juce::String> (const juce::var& v)
    {
        return juce::var (v.toString());
    }
    
private:
    juce::Value origin_;

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (FilterBase)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

template <class T> class Filter : FilterBase {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Filter (const juce::Value& origin) : FilterBase (origin)
    {
    }

    ~Filter() = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setValue (const juce::var& newValue) override
    {
        setValueProceed (FilterBase::cast<T> (newValue));
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static juce::Value make (const juce::Value& value)
    {
        return juce::Value (new Filter<T> (value));
    }

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Filter)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace core

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
