
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

template <class T> class Filter : public juce::Value::ValueSource, private juce::Value::Listener {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Filter (const juce::Value& origin) : origin_ (origin)
    {
        origin_.addListener (this);
    }

    ~Filter() = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::var getValue() const override
    {
        return origin_.getValue();
    }

    juce::String getType (const juce::var& v)
    {
        if (v.isInt())      { return juce::String ("isInt");    }
        if (v.isInt64())    { return juce::String ("isInt64");  }
        if (v.isBool())     { return juce::String ("isBool");   }
        if (v.isDouble())   { return juce::String ("isDouble"); }
        if (v.isString())   { return juce::String ("isString"); }
        
        return juce::String ("undefined");
    }
    
    void setValue (const juce::var& newValue) override
    {
        const juce::var old (origin_.getValue());
        const juce::var t (static_cast<T> (newValue));
                
        DBG (t.toString() + " -> " + old.toString());
        DBG (getType (t) + " -> " + getType (old));
        
        if (!t.equals (old)) {
            DBG ("!");
            origin_ = t;
            sendChangeMessage (false);
        }
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void valueChanged (juce::Value&) override
    {
        sendChangeMessage (true);
    }

public:
    static juce::Value make (const juce::Value& value)
    {
        return juce::Value (new Filter<T> (value));
    }
    
private:
    juce::Value origin_;

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Filter)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace core

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
