
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Group {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

friend class Tree;

template<class T> friend struct Iterator;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

using Iter = core::Iterator<Parameter>;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    explicit Group (const juce::ValueTree& group = juce::ValueTree()) : group_ (group)
    {
    }

public:
    ~Group() = default;
    
public:
    Group (const Group&) = default;
    Group (Group&&) = default;
    Group& operator = (const Group&) = default;
    Group& operator = (Group&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Iter begin() const { return Iter (group_.begin()); }
    Iter end() const   { return Iter (group_.end());   }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::String getName() const;
    bool isHidden() const;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Parameter addBoolean (const juce::String&, const juce::String&, const juce::String&, bool);
    Parameter addColour (const juce::String&, const juce::String&, const juce::String&, juce::Colour);
    Parameter addInteger (const juce::String&, const juce::String&, const juce::String&, int);
    Parameter addFloat (const juce::String&, const juce::String&, const juce::String&, double);
    Parameter addText (const juce::String&, const juce::String&, const juce::String&, const juce::String&);

private:
    Parameter addParameter (const juce::String&,
        const juce::String&,
        const juce::String&,
        const juce::String&,
        juce::var v);
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool      hasParameter (const juce::String&) const;
    Parameter getParameter (const juce::String&) const;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool isValid() const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

private:
    juce::ValueTree group_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace core

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
