
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Group {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

friend class Tree;

template <class T> friend struct Iterator;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

using Iter = core::Iterator<Parameter>;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    explicit Group (const juce::ValueTree& group = juce::ValueTree()) : group_ (group)
    {
    }

public:
    ~Group() = default;
    
public:
    Group (const Group&) = default;
    Group (Group&&) = default;
    Group& operator = (const Group&) = default;
    Group& operator = (Group&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Iter begin() const { return Iter (group_.begin()); }
    Iter end() const   { return Iter (group_.end());   }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::String getName() const;
    bool isHidden() const;
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    template <class T> Parameter addParameter (const juce::String& key,
        const juce::String& label,
        const juce::String& info,
        T t,
        Delegate::Manager* p = nullptr)
    {
        const core::Invariant i = { key, ParameterType<T>::get(), label, info };

        return add (p, i, juce::VariantConverter<T>::toVar (t));
    }
    
private:
    Parameter add (Delegate::Manager*, const core::Invariant&, juce::var);
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    bool      hasParameter (const juce::String&) const;
    Parameter getParameter (const juce::String&) const;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

private:
    juce::ValueTree group_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace core

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
