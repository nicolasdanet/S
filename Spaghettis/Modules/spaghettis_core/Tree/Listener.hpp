
/* Copyright (c) 2022 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Listener : public juce::ValueTree::Listener {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Handler {
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Handler (const juce::String& key, std::function<void (const Parameter&)> f) : key_ (key), f_ (f)
    {
    }
    
    ~Handler() = default;

public:
    Handler (const Handler&) = default;
    Handler (Handler&&) = default;
    Handler& operator = (const Handler&) = default;
    Handler& operator = (Handler&&) = default;
    
public:
    juce::String key_;
    std::function<void (const Parameter&)> f_;
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

public:
    Listener()  = default;
    ~Listener() = default;

public:
    Listener (const Listener&) = default;
    Listener (Listener&&) = default;
    Listener& operator = (const Listener&) = default;
    Listener& operator = (Listener&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void valueTreePropertyChanged (juce::ValueTree& tree, const juce::Identifier&) override
    {
        callHandlers (tree); treeHasChanged();
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void addHandler (const juce::String& key, std::function<void (const Parameter&)> f);

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void callHandlers (const juce::ValueTree& tree);
    
private:
    virtual void treeHasChanged() = 0;

private:
    std::vector<Handler> handlers_;
        
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace core

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
