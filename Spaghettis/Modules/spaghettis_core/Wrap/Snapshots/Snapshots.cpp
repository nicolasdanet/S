
/* Copyright (c) 2023 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

auto hasSameIdentifier (core::UniqueId u)
{
    return [u](const SnapshotsElement& e)
    {
        return (e.getUnique() == u);
    };
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void Snapshots::publish (core::UniqueId u, void* p, int size)
{
    const std::lock_guard<std::mutex> l (lock_);
    
    v_.emplace_back (u, p, size);
}
    
void Snapshots::discard (core::UniqueId u)
{
    const std::lock_guard<std::mutex> l (lock_);
    
    v_.erase (std::remove_if (v_.begin(), v_.end(), hasSameIdentifier (u)), v_.end());
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void Snapshots::fetch (core::UniqueId u, Snapshot& s)
{
    const std::lock_guard<std::mutex> l (lock_);
    
    auto r = std::find_if (v_.cbegin(), v_.cend(), hasSameIdentifier (u));
    
    if (r != v_.cend()) {
        void* p = r->getData();
        int n   = r->getSize();
        s.fetch (p, n);
    }
}

Snapshot Snapshots::get (core::UniqueId u,
    juce::Range<int> domain,
    juce::Range<double> range,
    juce::Rectangle<int> painted)
{
    Snapshot s (domain, range, painted);
    
    fetch (u, s);
    
    return s;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
