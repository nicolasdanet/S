
/* Copyright (c) 2021 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

enum class LoggerType { normal, system, warning, error };

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Logger {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    using MessagesElement = std::tuple<juce::String, LoggerType, core::UniquePath>;
    using MessagesPacket  = std::vector<Logger::MessagesElement>;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

private:
    enum {
        LOGGER_MESSAGE  = 0,
        LOGGER_TYPE     = 1,
        LOGGER_UNIQUE
    };

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    static juce::Colour getColourForType (LoggerType type)
    {
        Colours::ColourIds c = Colours::consoleTextError;
                    
        if (type == LoggerType::normal)       { c = Colours::consoleTextDefault; }
        else if (type == LoggerType::system)  { c = Colours::consoleTextSystem;  }
        else if (type == LoggerType::warning) { c = Colours::consoleTextWarning; }
                    
        return Colours::fetchColour (c);
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    virtual ~Logger() = default;

protected:
    Logger() = default;
    
    Logger (const Logger&) = default;
    Logger (Logger&&) = default;
    Logger& operator = (const Logger&) = default;
    Logger& operator = (Logger&&) = default;

public:
    virtual void logMessage (MessagesPacket& m) = 0;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

public:
    static juce::String getText (const MessagesElement& e)
    {
        return std::get<LOGGER_MESSAGE> (e);
    }
    
    static LoggerType getType (const MessagesElement& e)
    {
        return std::get<LOGGER_TYPE> (e);
    }
    
    static core::UniquePath getUniquePath (const MessagesElement& e)
    {
        return std::get<LOGGER_UNIQUE> (e);
    }
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
