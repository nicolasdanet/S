
/* Copyright (c) 2021 Nicolas Danet. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class MessageQueues : private juce::AsyncUpdater {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

using FunctorsContainer = std::vector<std::function<void()>>;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    MessageQueues()
    {
    }
    
    ~MessageQueues()
    {
        jassert (inputs_.empty());
        jassert (outputs_.empty());
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void addInput (const std::function<void()>& f)
    {
        add (inputs_, lockInputs_, f);
    }

    void addOutput (const std::function<void()>& f)
    {
        add (outputs_, lockOutputs_, f); triggerAsyncUpdate();
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void clear()
    {
        poll (inputs_,  lockInputs_,  true);
        poll (outputs_, lockOutputs_, true);
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void pollInputs()
    {
        poll (inputs_, lockInputs_, false);
    }

private:
    void handleAsyncUpdate() override
    {
        poll (outputs_, lockOutputs_, false);
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void poll (FunctorsContainer& c, juce::CriticalSection& lock, bool fake)
    {
        FunctorsContainer scoped;
        
        {
            const juce::ScopedLock l (lock); scoped.swap (c);
        }
        
        if (!fake) { for (auto f : scoped) { f(); } }
    }
    
    void add (FunctorsContainer& c, juce::CriticalSection& lock, std::function<void()> f)
    {
        const juce::ScopedLock l (lock); c.push_back (std::move (f));
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    FunctorsContainer inputs_;
    juce::CriticalSection lockInputs_;

private:
    FunctorsContainer outputs_;
    juce::CriticalSection lockOutputs_;
    
private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MessageQueues)
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
