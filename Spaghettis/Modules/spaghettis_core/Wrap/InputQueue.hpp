
/* Copyright (c) 2021 Nicolas Danet. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class InputQueue {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

using FunctorsContainer = std::vector<std::function<void()>>;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    InputQueue()
    {
    }
    
    ~InputQueue()
    {
        jassert (queue_.empty());
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void add (std::function<void()> f)
    {
        const juce::ScopedLock lock (lock_); queue_.push_back (std::move (f));
    }
    
    void clear()
    {
        pollProceed (true);
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void pollProceed (bool fake)
    {
        FunctorsContainer scoped;
        
        {
            const juce::ScopedLock lock (lock_); scoped.swap (queue_);
        }
        
        if (!fake) { for (auto f : scoped) { f(); } }
    }

public:
    void poll (bool fake = false)
    {
        bool hasSometing = 0;
        
        {
            const juce::ScopedLock lock (lock_); hasSometing = (queue_.empty() == false);
        }
        
        if (hasSometing) { pollProceed (fake); }
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    FunctorsContainer queue_;
    juce::CriticalSection lock_;

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (InputQueue)
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
