
/* Copyright (c) 2023 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

auto hasSameIdentifier (core::UniqueId u)
{
    return [u](const Snapshots::SnapshotsElement& e)
    {
        return (std::get<Snapshots::SNAPSHOTS_UNIQUE> (e) == u);
    };
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

void Snapshots::publish (core::UniqueId u, void* p, int size)
{
    const std::lock_guard<std::mutex> l (lock_);
    
    v_.emplace_back (u, p, size);
}
    
void Snapshots::discard (core::UniqueId u)
{
    const std::lock_guard<std::mutex> l (lock_);
    
    v_.erase (std::remove_if (v_.begin(), v_.end(), hasSameIdentifier (u)), v_.end());
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

Snapshot Snapshots::get (core::UniqueId)
{
    Snapshot t;
    return t;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
