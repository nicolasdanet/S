
/* Copyright (c) 2021 Jojo and others. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Wrapper : private juce::AsyncUpdater, private juce::Thread {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    explicit Wrapper() : juce::Thread (juce::String ("Core"))
    {
    }
    
    ~Wrapper() override
    {
        jassert (isThreadRunning() == false);
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void run() override;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void start (const juce::StringArray& commandLine, const juce::Font& font)
    {
        setCommandLine (commandLine); setFont (font);
        
        startThread();
    }
    
    void shutdown()
    {
        int n = 0; while (n < 8 && queues_.isAllInputsAlreadyHandled() == false) { wait (250); n++; }
        
        core::main_threadExit();
        
        const bool good = stopThread (1000);
        
        jassert (n < 8); jassert (good); (void)good;
        
        cancelPendingUpdate();
        
        queues_.clear();
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void addOutput (const Perform& f)
    {
        queues_.addOutput (f);
    }
    
    void addInput (const Perform& f)
    {
        queues_.addInput (f);
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void pollInputs()
    {
        queues_.pollInputs();
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setLogger (Logger* logger)
    {
        logger_ = logger;
    }

    const juce::StringArray& getCommandLine() const
    {
        return commandLine_;
    }

private:
    void setCommandLine (const juce::StringArray&);
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void post (const juce::String& m, Logger::Type type, const core::UniquePath& u)
    {
        post_.add (m, type, u); triggerAsyncUpdate();
    }
    
private:
    void handleAsyncUpdate() override
    {
        post_.log (logger_);
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

private:
    void setFont (const juce::Font& font)
    {
        font_ = font;
    }

public:
    int getWidthForString (const juce::String& s) const
    {
        return font_.getStringWidth (s);
    }
    
    int getHeightForString (const juce::String&) const
    {
        return static_cast <int> (font_.getHeight());
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

private:
    Logger *logger_;
    Post post_;
    juce::StringArray commandLine_;
    Queues queues_;
    juce::Font font_;
    
private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Wrapper)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
