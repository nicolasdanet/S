
/* Copyright (c) 2021 Nicolas Danet. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Wrapper : private juce::AsyncUpdater, private juce::Thread {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Wrapper() : juce::Thread (juce::String ("Core"))
    {
    
    }
    
    ~Wrapper()
    {
        jassert (isThreadRunning() == false);
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void run() override;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void start (const juce::StringArray& commandLine)
    {
        setCommandLine (commandLine);
        
        startThread();
    }
    
    void shutdown()
    {
        core::main_threadExit();
        
        bool good = stopThread (1000);
        
        jassert (good); (void)good;
        
        cancelPendingUpdate();
        
        input_.clear();
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void handle (const std::function<void()>& f)
    {
        input_.add (f);
    }
    
    void poll()
    {
        input_.poll();
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setLogger (Logger* logger)
    {
        logger_ = logger;
    }

    const juce::StringArray& getCommandLine() const
    {
        return commandLine_;
    }

private:
    void setCommandLine (const juce::StringArray&);
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void post (const juce::String& m, Logger::Type type = Logger::Type::normal)
    {
        post_.add (m, type); triggerAsyncUpdate();
    }
    
private:
    void handleAsyncUpdate() override
    {
        post_.log (logger_);
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

private:
    Logger *logger_;
    Post post_;
    juce::StringArray commandLine_;
    InputQueue input_;
    
private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Wrapper)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
