
/* Copyright (c) 2021 Nicolas Danet. */

/* < https://opensource.org/licenses/BSD-3-Clause > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace spaghettis {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Wrapper : private juce::AsyncUpdater, private juce::Thread {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

using MessagesElement   = std::pair<juce::String, Logger::Type>;
using MessagesContainer = std::vector<MessagesElement>;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    Wrapper() : juce::Thread (juce::String ("Core"))
    {
    
    }
    
    ~Wrapper()
    {
        jassert (isThreadRunning() == false);
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    void run() override;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void start (const juce::StringArray& commandLine)
    {
        setCommandLine (commandLine);
        
        startThread();
    }
    
    void shutdown()
    {
        core::main_threadExit();
        
        bool good = stopThread (1000);
        
        jassert (good); (void)good;
        
        cancelPendingUpdate();
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void setLogger (Logger* logger)
    {
        logger_ = logger;
    }

    const juce::StringArray& getCommandLine() const
    {
        return commandLine_;
    }

private:
    void setCommandLine (const juce::StringArray&);
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    void post (const juce::String& m, Logger::Type type = Logger::Type::normal)
    {
        {
            const juce::ScopedLock lock (lock_); messages_.emplace_back (m, type);
        }
        
        triggerAsyncUpdate();
    }
    
private:
    void handleAsyncUpdate() override
    {
        MessagesContainer scoped;
        
        {
            const juce::ScopedLock lock (lock_); scoped.swap (messages_);
        }
        
        if (logger_) {
        //
        for (const auto& e : scoped) { logger_->logMessage (std::get<0> (e), std::get<1> (e)); }
        //
        }
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

private:
    Logger *logger_;
    MessagesContainer messages_;
    juce::CriticalSection lock_;
    juce::StringArray commandLine_;
    
private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Wrapper)
};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

} // namespace spaghettis

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
